version: '3.8'

services:
  # Node.js API Service
  api:
    build:
      context: ./apps/api
      dockerfile: Dockerfile
      target: production
    container_name: sistercheck-api
    ports:
      - "5000:5000"
    environment:
      - NODE_ENV=production
      - PORT=5000
    volumes:
      - ./apps/api/.env:/app/.env:ro
    networks:
      - sistercheck-network
    depends_on:
      - mongodb
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "node", "-e", "require('http').get('http://localhost:5000/health', (res) => { process.exit(res.statusCode === 200 ? 0 : 1) })"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s

  # Python ML Backend Service
  python-ml:
    build:
      context: ./apps/python
      dockerfile: Dockerfile
      target: production
    container_name: sistercheck-python-ml
    ports:
      - "5001:5001"
    environment:
      - FLASK_ENV=production
      - PORT=5001
    volumes:
      - ./apps/python/models:/app/models:ro
      - ./apps/python/data:/app/data:ro
    networks:
      - sistercheck-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "python", "-c", "import requests; requests.get('http://localhost:5001/health')"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s

  # Flutter Web App
  flutter-web:
    build:
      context: ./apps/flutter
      dockerfile: Dockerfile
      target: production
    container_name: sistercheck-flutter-web
    ports:
      - "80:80"
    networks:
      - sistercheck-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "wget", "--no-verbose", "--tries=1", "--spider", "http://localhost/"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s

  # MongoDB Database
  mongodb:
    image: mongo:7.0
    container_name: sistercheck-mongodb
    ports:
      - "27017:27017"
    environment:
      - MONGO_INITDB_ROOT_USERNAME=admin
      - MONGO_INITDB_ROOT_PASSWORD=sistercheck123
      - MONGO_INITDB_DATABASE=sistercheck
    volumes:
      - mongodb_data:/data/db
      - ./mongo-init:/docker-entrypoint-initdb.d:ro
    networks:
      - sistercheck-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "mongosh", "--eval", "db.adminCommand('ping')"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s

  # Redis Cache (for session management)
  redis:
    image: redis:7-alpine
    container_name: sistercheck-redis
    ports:
      - "6379:6379"
    volumes:
      - redis_data:/data
    networks:
      - sistercheck-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s

  # Nginx Reverse Proxy
  nginx:
    image: nginx:alpine
    container_name: sistercheck-nginx
    ports:
      - "443:443"
      - "8080:80"
    volumes:
      - ./nginx/nginx.conf:/etc/nginx/nginx.conf:ro
      - ./nginx/ssl:/etc/nginx/ssl:ro
    networks:
      - sistercheck-network
    depends_on:
      - api
      - python-ml
      - flutter-web
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "wget", "--no-verbose", "--tries=1", "--spider", "http://localhost/"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s

volumes:
  mongodb_data:
    driver: local
  redis_data:
    driver: local

networks:
  sistercheck-network:
    driver: bridge 